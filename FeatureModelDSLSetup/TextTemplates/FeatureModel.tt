<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Web.dll" #>
<#@ import namespace="System.Web" #>
<#@ output extension=".html" #>
<html>
<head><title><#= this.FeatureModel.Name #></title></head>
<body style="font-family: calibri, candara, arial">
<b style="font-size: x-large"><#= this.FeatureModel.Name #></b>
<# if (!string.IsNullOrEmpty(this.FeatureModel.ParentFeatureModelFile)) {
	string parentLinkText = "<a href=\"" + this.FeatureModel.ParentFeatureModelFile.Replace(".fm",".html") + "\">" + this.FeatureModel.ParentFeatureModelFile.Replace(".fm","") + "</a>";
#>
<br/><i style="font-size: x-small; color: gray">(from <#= parentLinkText #>)</i>
<#}#>
<p><#=  this.FeatureModel.Description #></p>
<#

Feature rootFeature = this.FeatureModel.RootFeature;
if (rootFeature == null)
{
#> <p><font color="red">Feature model report generation error: root feature element not found.</font></p>
<#
}
else 
{
#>
<b style="font-size: large">Features</b>
<br/><i style="font-size: x-small; color: gray">(<#= this.FeatureModel.TotalFeaturesReport #>)</i>
<#
	Write("<ul><li style=\"margin-top: 0.5em\">");
	Generate(rootFeature);
	WriteLine("</li></ul>");
}
#>


<hr/>
<div style="font-size: x-small">
Generated by <b><a href="http://www.codeplex.com/FeatureModelDSL">Feature Model DSL</a></b> on <#= DateTime.Now #>
<br/><i>Implementation and extended design by: <a href="http://www.afurtado.net">Andre Furtado</a></i>
<br/><i>Original design by: <a href="http://www.ispysoft.net">Gunther Lenz and Christoph Wienands</a></i>
</div>
</body>
</html>
<#+ 
public void Generate(FeatureModelElement featureModelElement) {
	if (featureModelElement is Feature) {
		Feature feature = featureModelElement as Feature;
		StringBuilder featureText = new StringBuilder(feature.HtmlFormattedName);
		List<string> modifiers = new List<string>();
		
		if (feature.Occurence == Occurence.Optional) {
			modifiers.Add("optional");
			featureText.Insert(0,"<i>");
			featureText.Append("</i>");
			
		}
		
		foreach(Feature constrainedBy in feature.ConstrainedBy) {
			string constraint = Constrains.GetLink(constrainedBy,feature).Constraint;
			modifiers.Add(constrainedBy.HtmlFormattedName + " <i><font color=\"red\">" + HttpUtility.HtmlEncode(constraint) + "</font></i> it");
		}
		
		if (modifiers.Count > 0) {
			featureText.Append(" (" + modifiers[0]);
		}
		
		for (int i = 1; i < modifiers.Count; i++) {
			featureText.Append(", " + modifiers[i]);
		}
		
		if (modifiers.Count > 0) {
			featureText.Append(')');
		}
		
		if (!string.IsNullOrEmpty(feature.Description)) {
			featureText.Append(": " + HttpUtility.HtmlEncode(feature.Description));
		}
#>
		<#= featureText.ToString() #>
<#+
	}
	else if (featureModelElement is Alternative)
	{
		Alternative alternative = featureModelElement as Alternative;
		string alternativeText = "Alternative " + alternative.MinMaxIntervalText;
#>
		<font color="DimGray"><#= alternativeText #></font>
<#+		
	}
	if (featureModelElement.SubFeatureModelElements.Count > 0) {
		WriteLine("<ul>");
		foreach (FeatureModelElement subElement in featureModelElement.SubFeatureModelElements) {
			Write("<li style=\"margin-top: 0.5em\">");
			Generate(subElement);
			Write("</li>");
		}
		WriteLine("</ul>");
	}
}
#>